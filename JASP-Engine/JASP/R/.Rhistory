.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.0000000001), xlim=c(-0.1, 0.1))
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.000000000001), xlim=c(-0.1, 0.1))
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.0000001), xlim=c(-0.1, 0.1))
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.000001), xlim=c(-0.1, 0.1))
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.0001), xlim=c(-0.1, 0.1))
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bf10)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", ylim=c(0, 0.00000001), xlim=c(-0.1, 0.1))
}
lines(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$combined$betaA, beta=approxKaas$combined$betaB), lwd=2, col="red")
print("exact bf10")
1/exactKaas$repGivenOri$bf10
exactKaas$repGivenOri$bf10
approxKaas$repGivenOri$bf10
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$ori$bf10)*
.hFunction(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="")
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$ori$bf10)*
.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="")
}
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$ori$bf10)*
.hFunction(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="")
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$ori$bf10)*
.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRho(someDomain, kappa=someKappa), lwd=3, type="l", ylab="")
}
lines(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$ori$betaA, beta=approxKaas$ori$betaB),
col="red", lwd=3, lty=2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
1/(approxKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$ori$bf10)
1/(exactKaas$repGivenOri$bf10)
1/(approxKaas$repGivenOri$bf10)
1/(exactKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$ori$bf10)
1/(exactKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
1/(approxKaas$repGivenOri$bf10)
approxKaas$combined$bf10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
1/(approxKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$combined$betaA, beta=approxKaas$combined$betaB), lwd=2, col="red"))
plot(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$combined$betaA, beta=approxKaas$combined$betaB), lwd=2, col="red")
plot(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$combined$betaA, beta=approxKaas$combined$betaB), lwd=2, col="red", type="l")
1/(approxKaas$repGivenOri$bf10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
exactKaas$rep$bf10
1/(exactKaas$rep$bf10)
1/(exactKaas$rep$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$rep$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$rep$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
.bf10CorrieRepJosine <- function(nOri, rOri, nRep, rRep, kappa=1, methodNumber=1, hyperGeoOverFlowThreshold=24){
# Replication BF for the correlation
#
# 1:2 are based on the exact reduced likelihood functions
# 3:4 are based on the beta approximations to the reduced likelihood functions
#
#	methodNumber=1: Use exact likelihood Ly, Marsman, Wagenmakers (2017)
#	methodNumber=2: Use semi-exact result, based on approximation of the likelihood JeffreysExact, see Wagenmakers et al (2015) bathing
#	methodNumber=3: Savage Dickey beta approximation
#	methodNumber=4: Marsman's IMH sampler and then Savage Dickey beta approximation
#
# Output is a list of the
#   - original data,
#   - rep data,
#   - combined inference
#   - replication BFs given the original
#
#
# TODO: avoid when pass through object
oriObj <- .bfCorrieKernel(n=nOri, r=rOri, method=methodNumber, kappa=kappa)
# Default is "NA" list
result <- list(ori=oriObj, rep=list(NULL),
combined=list(n=c(nOri, nRep), r=c(rOri, rRep),
repMethodNumber=methodNumber,
bf10=NA, bfPlus0=NA, bfMin0=NA,
betaA=NA, betaB=NA) ,
repGivenOri=list(n=c(nOri, nRep), r=c(rOri, rRep),
bf10=NA, bfPlus0=NA, bfMin0=NA),
repMethodNumber=methodNumber)
if (is.infinite(oriObj$bf10)){
# No use, too big too great, it's true
#
return(result)
}
# Calculate beta fits of the combined likelihood
if (kappa==1){
#
# methods 3 and 4 are highly dependent on the beta fits based on kappa = 1
if (methodNumber %in% 3:4 && any(is.na(c(oriObj$betaA, oriObj$betaB)))){
# Total failure, real sad
return(result)
}
repObj <- .bfCorrieKernel(n=nRep, r=rRep, method=methodNumber, kappa=kappa)
result$rep <- repObj
if (methodNumber %in% 3:4 && any(is.na(c(repObj$betaA, repObj$betaB)))){
# Failed
return(result)
}
result$combined$betaA <- oriObj$betaA-1+repObj$betaA
result$combined$betaB <- oriObj$betaB-1+repObj$betaB
} else {
# kappa \neq 1
if (methodNumber %in% 1:3){
oriLikelihoodFit <- .posteriorBetaParameters(n=nOri, r=rOri, kappa=1)
repLikelihoodFit <- .posteriorBetaParameters(n=nRep, r=rRep, kappa=1)
}
if (methodNumber==4){
oriLikelihoodFit <- .marsmanMHSampler(n=nOri, r=rOri, kappa=1)
if (is.na(oriLikelihoodFit$betaA) || is.na(oriLikelihoodFit$betaB)) {
# Total failure, it's sad
#
return(result)
}
repLikelihoodFit <- .marsmanMHSampler(n=nRep, r=rRep, kappa=1)
}
if (methodNumber %in% 3:4){
if (any(is.na(c(oriLikelihoodFit$betaA, oriLikelihoodFit$betaB,
repLikelihoodFit$betaA, repLikelihoodFit$betaB)))){
# Failure
return(result)
}
}
# combine here
result$combined$betaA <- oriLikelihoodFit$betaA-1+repLikelihoodFit$betaA-1+1/kappa
result$combined$betaB <- oriLikelihoodFit$betaB-1+repLikelihoodFit$betaB-1+1/kappa
# Here kappa not 1, but still can see what the original default bfs will do for the rep data
repObj <- .bfCorrieKernel(n=nRep, r=rRep, method=methodNumber, kappa=kappa)
result$rep <- repObj
}
if (methodNumber=="exact" || methodNumber==1) {
twoSidedIntegrand <- function(x){.hFunctionCombined(nOri, rOri, nRep, rRep, x)*.priorRho(x, kappa=kappa)}
plusSidedIntegrand <- function(x){.hFunctionCombined(nOri, rOri, nRep, rRep, x)*.priorRhoPlus(x, kappa=kappa)}
minSidedIntegrand <- function(x){.hFunctionCombined(nOri, rOri, nRep, rRep, x)*.priorRhoMin(x, kappa=kappa)}
} else if (methodNumber=="jeffreysIntegrate" || methodNumber==2) {
twoSidedIntegrand <- function(x){.hJeffreysApprox(nRep, rRep, x)*.hJeffreysApprox(nOri, rOri, x)*.priorRho(x, kappa=kappa)}
plusSidedIntegrand <- function(x){.hJeffreysApprox(nRep, rRep, x)*.hJeffreysApprox(nOri, rOri, x)*.priorRhoPlus(x, kappa=kappa)}
minSidedIntegrand <- function(x){.hJeffreysApprox(nRep, rRep, x)*.hJeffreysApprox(nOri, rOri, x)*.priorRhoMin(x, kappa=kappa)}
}
if (methodNumber %in% 1:2){
bf10Combined <- try(silent=TRUE, exp=integrate(twoSidedIntegrand, -1, 1)$value)
if (isTryError(bf10Combined)){
# Total loser, can't even calculate the combined bf10
return(result)
}
if (is.na(bf10Combined)){
# So sad combined bf10 not available
result$combined$bf10 <- NA
return(result)
}
if (is.infinite(bf10Combined)){
# So big, totally infinite
#
result$combined$bf10 <- Inf
result$repGivenOri$bf10 <- Inf
if (r >= 0){
result$combined$bfPlus0 <- Inf
result$combined$bfMin0 <- 0
result$repGivenOri$bfPlus0 <- Inf
result$repGivenOri$bfMin0 <- 0
} else if (r < 0){
result$combined$bfPlus0 <- 0
result$combined$bfMin0 <- Inf
result$repGivenOri$bfPlus0 <- 0
result$repGivenOri$bfMin0 <- Inf
}
return(result)
}
if (is.finite(bf10Combined)){
# Total winner, real great, it's the best
result$combined$bf10 <- bf10Combined
result$repGivenOri$bf10 <- bf10Combined/oriObj$bf10
if (log(bf10Combined) > hyperGeoOverFlowThreshold){
# So big like my hands, can't handle it need to adjust
tempList <- .bfSavageDickeyOneSidedAdapt(bf10Combined, a=result$combined$betaA, b=result$combined$betaB, kappa=kappa)
result$combined$bfPlus0 <- tempList$bfPlus0
result$combined$bfMin0 <- tempList$bfMin0
} else {
# No overflow, thus, try numerically integrate
#
bfPlus0Combined <- try(silent=TRUE, exp=integrate(plusSidedIntegrand, 0, 1)$value)
bfMin0Combined <- try(silent=TRUE, exp=integrate(minSidedIntegrand, -1, 0)$value)
if (isTryError(list(bfPlus0Combined, bfMin0Combined))){
# One sided failed
return(result)
}
if ( bfPlus0Combined < 0 || bfMin0Combined < 0) {
# One sided failed
return(result)
}
if (is.na(bfPlus0Combined) || is.na(bfMin0Combined) || is.infinite(bfPlus0Combined) || is.infinite(bfMin0Combined) ){
tempList <- .bfSavageDickeyOneSidedAdapt(bf10Combined, a=result$combined$betaA, b=result$combined$betaB, kappa=kappa)
result$combined$bfPlus0 <- tempList$bfPlus0
result$combined$bfMin0 <- tempList$bfMin0
} else{
result$combined$bfPlus0 <- bfPlus0Combined
result$combined$bfMin0 <- bfMin0Combined
}
}
}
}
if (methodNumber %in% 3:4){
# TODO:
if (!is.na(result$combined$betaA) && !is.na(result$combined$betaB)) {
# Use beta fit and Savage-Dickey
tempList <- .bfSavageDickeyBeta(a=result$combined$betaA, b=result$combined$betaB, kappa=kappa)
result$combined$bf10 <- tempList$bf10
result$combined$bfPlus0 <- tempList$bfPlus0
result$combined$bfMin0 <- tempList$bfMin0
}
}
# TODO: checks for bf10Combined, bfPlus0Combined, bfMin0Combined for zeroes and infinities
result$repGivenOri$bf10 <- (result$combined$bf10) / (oriObj$bf10)
result$repGivenOri$bfPlus0 <- (result$combined$bfPlus0) / (oriObj$bfPlus0)
result$repGivenOri$bfMin0 <- (result$combined$bfMin0) / (oriObj$bfMin0)
return(result)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
someRRep
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
exactKaas$repGivenOri$bf10
exactKaas$rep$bfPlus0
1/(exactKaas$rep$bfPlus0)
exactKaas$repGivenOri$bfPlus0
1/(exactKaas$repGivenOri$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.00000001), xlim=c(-0.1, 0.1))
}
lines(someDomain, .stretchedBeta(someDomain, alpha=approxKaas$combined$betaA, beta=approxKaas$combined$betaB), lwd=2, col="red")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.00000001), xlim=c(-0.1, 0.1))
}
lines(someDomain, 1/(exactKaas$ori$bfPlus0)*
.hFunction(nOri=someNOri, rOri=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
lines(someDomain, 1/(exactKaas$ori$bfPlus0)*
.hFunction(n=someNOri, r=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
if (exactKaas$repMethodNumber==1){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hFunctionCombined(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
} else if (exactKaas$repMethodNumber==2){
plot(someDomain, 1/(exactKaas$combined$bfPlus0)*
.hJeffreysApprox(n=someNRep, r=someRRep, someDomain)*.hJeffreysApprox(n=someNOri, r=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="") #, ylim=c(0, 0.00000001), xlim=c(-0.1, 0.1))
}
lines(someDomain, 1/(exactKaas$ori$bfPlus0)*
.hFunction(n=someNOri, r=someROri, someDomain)*
.priorRhoPlus(someDomain, kappa=someKappa), lwd=3, type="l", ylab="", col="red") #, ylim=c(0, 0.1), xlim=c(-0.1, 0.1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bfPlus0)
source('~/.active-rstudio-document', echo=TRUE)
someRRep
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1/(exactKaas$repGivenOri$bf10)
1/(approxKaas$repGivenOri$bf10)
1/(exactKaas$repGivenOri$bf10)
.bfR0Josine
.bfR0Josine(someNOri, someROri, someNRep, someRRep)
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
1/(exactKaas$repGivenOri$bf10)
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
1/(exactKaas$repGivenOri$bf10)
1/(exactKaas$repGivenOri$bf10)
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
exactMethodNumber <- 1
source('~/.active-rstudio-document', echo=TRUE)
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
1/(exactKaas$repGivenOri$bfPlus0)
1/(exactKaas$repGivenOri$bf10)
1/(.bfR0Josine(someNOri, someROri, someNRep, someRRep))
exactKaas <- .bf10CorrieRepJosine(nOri=someNOri, rOri=someROri,
nRep=someNRep, rRep=someRRep,
methodNumber=1, kappa=someKappa)
exactKaas$ori
exactKaas$ori$n
exactKaas$ori$r
exactKaas$rep$r
exactKaas$rep$bfPlus0
1/(exactKaas$rep$bfPlus0)
names(exactKaas)
exactKaas$repGivenOri$n
exactKaas$repGivenOri$r
exactKaas$repGivenOri$bfPlus0
1/(exactKaas$repGivenOri$bfPlus0)
1/(exactKaas$repGivenOri$bf10)
source('~/Desktop/JASP/jasp-desktop/JASP-Engine/JASP/R/common.R', echo=TRUE)
source('~/Downloads/replicationBFCorrie.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Downloads/replicationBFCorrie.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
exactKaas$ori
exactKaas$rep
exactKaas$repGivenOri
exactSolution <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=-0.08, methodNumber=1, kappa=1)
exactSolution$repGivenOri$bf10
1/(exactSolution$repGivenOri$bf10)
exactSolution <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=-0.08, methodNumber=1, kappa=1)
1/(exactSolution$repGivenOri$bf10)
1/(exactSolution$repGivenOri$bfPlus0)
1/(exactSolution$repGivenOri$bfMin0)
exactSolution$repGivenOri$bfMin0
exactResult$bf10
exactResult <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=-0.08, methodNumber=1, kappa=1)
exactResult$bf10
exactResult$ori$bf10
exactResult$ori$bfPlus0
exactResult$rep$bf10
exactResult$rep$bfPlus0
1/(exactResult$rep$bf10)
1/(exactResult$rep$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
exactResult <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=0.93, methodNumber=1, kappa=1)
exactResult$ori$bf10
exactResult$ori$bfPlus0
1/(exactResult$rep$bf10)
1/(exactResult$rep$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
(exactResult$combined$bf10)
(exactResult$combined$bfPlus0)
chooseExample <- function(case){
# Choose some replication data sets
switch(case,
{someNOri <<- 60; someROri <<- 0.7; someNRep <<- 60; someRRep <<- 0.60}, # 1 Same
{someNOri <<- 60; someROri <<- 0.7; someNRep <<- 60; someRRep <<- -.60}, # 2 Opposite
{someNOri <<- 30; someROri <<- 0.7; someNRep <<- 60; someRRep <<-  -.30}, # 3 Opposit nOri smaller
{someNOri <<- 575; someROri <<- 0.7; someNRep <<- 300; someRRep <<- 0.70}, # 4 large n, same
{someNOri <<- 575; someROri <<- 0.7; someNRep <<- 300; someRRep <<- -.60}, # 5 large nOri < nRep, opposite
{someNOri <<- 600; someROri <<- 0.7; someNRep <<- 600; someRRep <<- -.70}, # 6 large nRep=nOri, opposite
{someNOri <<- 9; someROri <<- 0.93; someNRep <<- 32; someRRep <<- -.08}, # 7 Boekel new
{someNOri <<- 9; someROri <<- 0.93; someNRep <<- 31; someRRep <<- 0.03}, # 8 boekel OLD
{someNOri <<- 51; someROri <- 0.51; someNRep <<- 34; someRRep <<- -.15}, # 9 Xu: bas total-lambda1 new
{someNOri <<- 51; someROri <<- .51; someNRep <<- 35; someRRep <<- -.28}, # 10 Xu: bas total-lambda1 OLD
{someNOri <<- 51; someROri <<- .52; someNRep <<- 35; someRRep <<- -.15}, # 11 Xu: bas fun-FA new
{someNOri <<- 51; someROri <<- .52; someNRep <<- 36; someRRep <<- -.19},  # 12 Xu: bas fun-FA OLD
{someNOri <<- 51; someROri <<- .58; someNRep <<- 35; someRRep <<- -.04},  # 13 Xu: bas fun-lambda1 new
{someNOri <<- 51; someROri <<- .58; someNRep <<- 35; someRRep <<- -.24},  # 14 Xu: bas fun-lambda1 OLD
{someNOri <<- 51; someROri <<- .51; someNRep <<- 34; someRRep <<- 0.05},  # 15 Xu: bas fun- MD new
{someNOri <<- 51; someROri <<- .51; someNRep <<- 36; someRRep <<- 0.15}  # 16 Xu: bas fun- MD OLD
)
}
chooseExample(8)
for (i in 8:16){
chooseExample(i)
exactResult <- .bfCorrieRepJosine(nOri=someNOri, rOri=someROri, nRep=someNRep, rRep=someRRep, kappa=1, methodNumber=1)
print(1/exactResult$repGivenOri$bf10)
}
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=34, rRep=-.15, kappa=1, methodNumber=1)
1/(exactResult$repGivenOri$bf10)
1/(exactResult$ori$bfPlus0)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=34, rRep=-.15, kappa=1, methodNumber=1)
1/(exactResult$ori$bfPlus0)
(exactResult$ori$bfPlus0
1/(exactResult$repGivenOri$bf10)
# old
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=35, rRep=-.28, kappa=1, methodNumber=1)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=34, rRep=-.15, kappa=1, methodNumber=1)
exactResult$ori$bfPlus0
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=35, rRep=-.28, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.52, nRep=35, rRep=-.15, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.52, nRep=36, rRep=-.19, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.58, nRep=35, rRep=-.04, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.58, nRep=35, rRep=-.24, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=34, rRep=.05, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=51, rOri=.51, nRep=36, rRep=.15, kappa=1, methodNumber=1)
1/(exactResult$rep$bfPlus0)
1/(exactResult$repGivenOri$bf10)
exactResult <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=-0.08, methodNumber=1, kappa=1)
exactResult$ori$bf10
exactResult$ori$bfPlus0
1/(exactResult$rep$bf10)
1/(exactResult$rep$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
1/(exactResult$repGivenOri$bf10)
1/(exactResult$repGivenOri$bfPlus0)
1/(exactResult$repGivenOri$bf10)
1/(exactResult$repGivenOri$bfPlus0)
exactResult <- .bfCorrieRepJosine(nOri=9, rOri=0.93, nRep=32, rRep=-0.08, methodNumber=1, kappa=1)
exactResult$ori$bf10
exactResult$ori$bfPlus0
1/(exactResult$rep$bf10)
1/(exactResult$rep$bfPlus0)
1/(exactResult$combined$bf10)
1/(exactResult$combined$bfPlus0)
1/(exactResult$repGivenOri$bf10)
1/(exactResult$repGivenOri$bfPlus0)
1/(exactResult$repGivenOri$bf10)
